defaults:
  - override hydra/hydra_logging: disabled
  - override hydra/job_logging: disabled
  - _self_ # keep this to the end of defaults to have config.yaml override values set in other yamls

hydra:
  output_subdir: null
  run:
    dir: .

meta:
  in_file: /home/sebalzer/Documents/Projects/TAVI_outcome/TimetoEvent/All_data_Clean-Base-A5Ye.xlsx
  out_dir: null
  events: "OutCome_Death"
  times: "OutCome_Death_Days"
  init_seed: 545
  n_seeds: 1
  n_workers: 24
  plot_format: "png"
  overwrite: True

preprocessing:
  save_as_pickle: True  # save the preprocessed data as pickle file for each seed
  test_size: 0.3
  corr_threshold: 0.9
  replace_zero_time_with: 0.01
  impute_strategy: "median"
  normalisation: "z-score"

survival:
  active: True  # False -> only run preprocessing, i.e. create data splits
  scoring: "as_concordance_index_ipcw_scorer"
  scalers:
    StandardScaler: True
    MinMaxScaler: False
    RobustScaler: False
  feature_selectors:
    SelectKBest: True
    VarianceThreshold: False
    FastICA: False
    PCA: False
    KernelPCA: False
    TruncatedSVD: False
  feature_selector_params:
    SelectKBest:
      selector__k: [5, 10, 15]
    VarianceThreshold:
      selector__threshold: ${numpy_range:0.01, 0.9, 0.1}
    FastICA: {}
    PCA: {}
    KernelPCA: {}
    TruncatedSVD: {}
  models:
    CoxPH: True
    Coxnet: False
    CoxLasso: False
    CoxElasticNet: False
    RSF: False
    FastSVM: False
    FastKSVM: False
    GBS: False
    CGBS: False
  model_params:
    CoxPH:
      model__estimator__alpha: [0.0001, 0.001, 0.01, 0.1, 1, 10]
    Coxnet:
      model__estimator__n_alphas: 100
      model__estimator__l1_ratio: ${numpy_range:0.1, 1, 0.1}
    CoxLasso:
      model__estimator__n_alphas: 100
    CoxElasticNet:
      model__estimator__n_alphas: 100
      model__estimator__l1_ratio: [0.9]
    RSF:
      model__estimator__n_estimators: [50, 100, 200]
      model__estimator__max_depth: [null, 5, 10]
    FastSVM:
      model__estimator__max_iter: [1000]
      model__estimator__tol: [0.00001]
      # mod__estimatorel__alpha: ${numpy_range:0.001, 0.01, 0.1}
      model__estimator__alpha: [0.0001, 0.001, 0.01, 0.1, 1, 10]
    FastKSVM:
      model__estimator__max_iter: [1000]
      model__estimator__tol: [0.00001]
      model__estimator__kernel: [linear, rbf]
      # mod__estimatorel__alpha: ${numpy_range:0.001, 0.01, 0.1}
      model__estimator__alpha: [0.0001, 0.001, 0.01, 0.1, 1, 10]
    GBS:
      model__estimator__learning_rate: [0.01, 0.1]
      model__estimator__n_estimators: [50, 100]
      model__estimator__dropout_rate: [0.1, 0.5]
      model__estimator__subsample: [0.8, 1.0]
    CGBS:
      model__estimator__learning_rate: [0.01, 0.1]
      model__estimator__n_estimators: [50, 100]
      model__estimator__dropout_rate: [0.1, 0.5]
      model__estimator__subsample: [0.8, 1.0]
